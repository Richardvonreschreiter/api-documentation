FORMAT: 1A
HOST: https://app.metry.io/api/2.0/

# Metry API v2
Metry collects consumption data from **subscribed meters** managed by utilities, as well as **local meters** managed by organizations or people.
Developers can access this data to build apps that **help people and organizations save energy**. Or just something that makes energy usage a little bit more exciting.

## Getting started

Copy the link below into a new tab in your <a href="https://app.metry.io/api/v2/accounts/me?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e" target=_blank>web browser</a>

    https://app.metry.io/api/v2/accounts/me?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

<h3>So, what happened here?</h3>
You just made a request to our API and **requested basic information** about the authenticated user!

<h3>What about the energy consumption?</h3>
To fetch the energy consumption, we first need to see what meters the user has:

    https://app.metry.io/api/v2/meters?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

And to see the **consumption for 2015**, you just type...

    https://app.metry.io/api/v2/consumptions/554367a2d16a0060008b4892/month/2015?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

That's it! Now you have a basic understanding of how our API works. Just scroll down to dig into the details! 
If you need help during your development process you're more than welcome to contact us at [support@metry.io](mailto:support@metry.io).

### Good to know

* API endpoint: https://app.metry.io/api/v2/
* Version numbers may be updated in the future, older versions will be supported for a period of time.
* All API traffic must be made over SSL (https://)

## API Authentication

The Metry API requires authentication - specifically requests made on behalf of a user. 
Authenticated requests require an access_token. These tokens are unique to a user and should be stored securely. 

There are two methods to authenticate to the API:
* **Private Access Token Authentication.** Used for single user authentication.
* **OAuth2 Authentication.** Used for app developers that allow many Metry accounts.

### Private access tokens
Private access-tokens are used to access data for your own account, and should never be
shared with anyone else. You should request your private access token in the Metry Portal ([https://app.metry.io](https://app.metry.io)).

You **should** pass the access token in an Authorization-header

    Authorization: Bearer <access-token>

You can also pass the access-token in the URL (not recommended)

    https://app.metry.io/api/v2/accounts/me?access_token=<access-token>


### OAuth2 Authentication

The Metry API uses the standard OAuth 2.0 protocol for simple, but effective authentication and authorization to third parties.

As an app developer, you should direct your users to login with Metry and grant access to your app. This will give you the users `refresh_token`, which should be used to request the `access_token`.
The refresh token should be stored on your end with the same security in mind as a password. The access_token itself will expire after 1 hour and could be refresh with the `refresh_token`, just as any other OAuth2 implementation.

### Metry OAuth Connect
To make this implementation as smooth as possible, we've created a javascript library to connect the user. This will also demonstrate a general OAuth2 flow.
See the Github repository on https://github.com/metry-io/metry-oauth-connect and try the demo on http://metry-oauth-connect-demo.s3-website-eu-west-1.amazonaws.com/

### ClientID and ClientSecret
To get started you need to request a `client_id` and `client_secret`. Please contact our support ([support@metry.io](mailto:support@metry.io)) and tell us a bit about your app.

### Metry oAuth 2.0 endpoints
If you decide to roll your own implementation, keep in mind the oAuth endpoints for Metry:

| Description   | Url           |
| ------------- | ------------- |
| Host                 | https://app.metry.io/  |
| oAuth 2.0 Authorize  | https://app.metry.io/oauth/authorize  |
| oAuth 2.0 Token      | https://app.metry.io/oauth/token  |

## List responses and pagination

All lists are paginated, and shows 50 items per request. You can advance to next pages by adding query params **skip** and the number
of items you want to skip (typically 50, 100, 150 and so on).

## Error handling

The Metry API attempts to return appropriate HTTP status codes for every request. A 2xx status code indicates success, whereas a 4xx or 5xx status code indicates an error.

### Status codes
| Status code   | Description  |
|---|---|
| 200  | Success  |
| 400 | Validation error: An accompanying error message will explain further |
| 401  | Authentication error: The oAuth credentials were missing, incorrect or expired  |
| 403  | Authentication error: The current authenticated user has no access to this resource  |
| 404  | Invalid endpoint: The endpoint requested is invalid or the resource requested, such as a meter, does not exists.   |
| 405  | The HTTP method used for this endpoint is invalid. |
| 5xx  | An error has occurred within Metry.io and the request couldn’t be completed. Metry.io has been notified about the problem |
| 503 | We're experiencing temporary server issues. Please try again |

### Error messages
When an API request fails, it will be accompanied with an explanatory message. For example, an error might look like this:
```
{
code: 404,
message: "Resource not found"
}
```

### Future compatibility
For future compatibility, please interpret the following HTTP status code ranges:

**200–299** as success<br>
**400–499** as client request errors<br>
**500–599** as server errors

# Group Accounts

## Accounts resource [/accounts/{id}]

### Get an account [GET]

Tip: Use alias "me" to reference the currently authorized user.

+ Parameters
    + id (required, string, `53294e5ae9cada3306001735`) ... The id of the account to get info about

+ Request

    + Headers

            Authorization: OAuth 2f9bf2cccd808358e6850e41c5a765ed


+ Response 200

    + Attributes (Account Base)

    + Body

            {"code":200,"message":"OK","profiling":null,"data":{"_id":"51c14e184a25203f5f000059","name":"Demokonto","username":"demo@demo.se","registration_form":{"enabled":null,"trusted":null,"validate_contracts":true,"css":"","terms":null,"intro_html":"","error_message":"","failure_message":"","logo_path":"","validation_key":null,"validation_secret":null,"welcome_email":null,"error_email":null,"failure_email":null},"plan":null,"role":"user","active":null,"grid_areas":null,"ean_prefixes":null,"ediel_number":null,"sub_accounts_count":0,"sub_accounts":[]}}

# Group Meters

A meter represents a physical device that measures consumption from a utility such as heat, cooling or electricity.
Each meter has a holder who can **assign** or **share** the meter to other accounts.

Assigned or shared meters references a root meter, and it is good practice to use the
**root._id** as unique identifier in your own applications. The **_id** field only represents the
reference itself, and is used to updated meta-information about the meter such as name, tags or if the meter is active or not.

## Meter [/meters/{id}]

+ Parameters
    + id (string, required) - Id of the meter.


### Get a meter [GET]

+ Response 200
    + Attributes (Meter Base)


## Meters collection [/meters]

You can list all meters accessible by the authenticated user.

### Filtering results
You can filter results by adding query params, for instance:

    .../meters?box=active

... will only list active meters.

You can add multiple query params. For **dates and numbers** you can use greater than and less than characters. For instance

    .../meters?consumption_stats.energy.month.last=<201503&box=active

This filter will only list *active* meters where *last month value is before March 2015*.

**NOTE!** Query params that are not recognized will be *silently ignored*, so make sure you spell them correctly!


### List meters [GET]

+ Parameters
    + box: active (stringFix)
    + name: Home sweet home (number)
    + address: Queenstreet 43 (string)
    + tags: foo,bar (string)
        Search for tags. Use comma to separate multiple tags.

+ Response 200
    + Attributes (Meter Base)



# Group Consumption

Consumption is the use of energy or other metrics for a meter. Consumption is available by the granularity month, day and hour, however, it is important to understand that the availability differs depending on meter and other external factors.


## Get Consumption [/consumptions/{meter_id}/{granularity}/{period}?metrics={metrics}]

We support the following **granularities**: hour, day and month, but we cannot guarantee that it is available for every meter.

The following **metrics** are supported: energy (kWh), flow (m<sup>3</sup>) and power (kW). Power always represents the average power. Note that  metric availability varies between meters.

The response with consumption **values will always match your query**. Missing values are replaced with <code>NULL</code>

Each period in the response will have a `start_date` and `end_date` property. Note that these are UTC dates, so depending on the meter's time zone they may appear to not match the date specified in the `period` input parameter. The `period` parameter is always interpreted in the meter's local timezone.

### Get consumption for a meter [GET]

+ Parameters
    + meter_id (required, string, `53294e5ae9cada3306001735`) ... The id of the meter to get consumption data for
    + granularity (required, string `month`) ... The granularity to get consumption data for (month, day or hour)
    + period (required, string `2013-201311`) ... Defines what period to fetch data for. You may enter any combination of YYYY, YYYYMM or YYYYMMDD as
    long as the start date is before the end date. You may also leave out the end date, if you, for instance, would like to just fetch data for 2013.
    All date will be interpreted using the meters time zone.
    + metrics (optional, string `energy,flow,power`) ... Limits the response to one or more metrics separated by commas. If not specified metric energy is returned.

+ Response 200 (application/json)

    + Body

            {
                "code": 200,
                "message": "OK",
                "data": [
                    {
                        "periods" : [
                            {
                                "start_date" : "2013-01-01T00:00:00+0001",
                                "end_date" : "2013-11-30T23:00:00+0001",
                                "energy": [1,2,3,4,5,6,7,8,9,10,11],
                                "flow": [1,2,3,4,5,6,7,8,9,10,11]
                            }
                        ],
                        "meter_id": "53185731df62324818000007"
                    }
                ]
            }

# Group Readings

Readings are the exact timestamped values for a meter.

## Get readings [/readings/{meter_id}/{period}?metrics={metrics}]

Each period in the response will have a start_date and end_date property. Note that these are UTC dates, so depending on the meter's time zone they may appear to not match the date specified in the period input parameter. The period parameter is always interpreted in the meter's local timezone.

### Reading status
The `status` for a reading value can be `recorded`, `interpolated` or `meter_change`.

* **recorded:** The value has been recorded exactly at the given point.
* **interpolated:** The value is interpolated based on the surrounded recorded values
* **meter_change:** The meter has changed. A meter change reading is the reading that occurred after a meter change.

### Readings blocked
As new readings are stored in Metry, the system automatically tries to find anomalous readings that could suggest that the incoming readings are incorrect.

If an anomaly is found, then the meter attribute `readings_blocked` will be set to `true`. This prevents new consumption values from being calculated from that point forward and that no readings will be interpolated until the meter attribute `readings_blocked` is changed back to `false`.

This attribute is also included in the response when requesting readings as seen in the example response.

Importing readings from Metry when readings are blocked is possible but should be avoided until the user has resolved the issue with the anomalous reading and unblocked readings.

### Get readings for a meter [GET]

+ Parameters
    + meter_id (required, string, `53294e5ae9cada3306001735`) ... The id of the meter to get reading data for
    + period (required, string `2013-201311`) ... Defines what period to fetch data for. You may enter any combination of YYYY, YYYYMM or YYYYMMDD as
    long as the start date is before the end date. You may also leave out the end date, if you, for instance, would like to just fetch data for 2013.
    All date will be interpreted using the meters timezone.
    + metrics (optional, string `energy,flow,power`) ... Limits the response to one or more metrics separated by commas. If not specified metric energy is returned.

+ Response 200 (application/json)

    + Body

            {
                "code": 200,
                "message": "OK",
                "data": [
                    {
                        "periods" : [
                            {
                                "start_date" : "2016-01-01T14:00:00+0001",
                                "end_date" : "2016-01-01T15:00:00+0001",
                                "energy": [
                                    {
                                        "time" : "2016-01-01T14:00:00+001",
                                        "value" : 12345.11,
                                        "status" : "recorded",
                                        "counter" : null
                                    },
                                    {
                                        "time" : "2016-01-01T15:00:00+001",
                                        "value" : 12365.11,
                                        "status" : "interpolated",
                                        "counter" : null
                                    },
                                    {
                                        "time" : "2016-01-01T15:13:00+001",
                                        "value" : 12369.94,
                                        "status" : "recorded",
                                        "counter" : null
                                    }
                                ]
                            }
                        ],
                        "readings_blocked": false,
                        "meter_id" : "53185731df62324818000007"
                    }
                ]
            }


# Data Structures

## Account Base (object)
+ _id: 55300dc9f82bd8080094a212 (string, required) - Unique identifier for the account.
+ name: Torsten Freyhazzle (string) - Name of the user
+ username: Torsten Freyhazzle (string) - Email, also used as sign in identity.


## Meter Base (object)
+ _id: 55300dc9f82bd8080094a212 (string, required) - Unique identifier for the meter assigned and shared meters gets a new unique id.
+ type: electricity, heat, cooling, gas, water (string) - What type of consumption the meter represents.
+ name: Pumphuset vid sjön (string) - Meta information
+ address: Klackvägen 12 (string) - Meta information
+ tags: ["foo", "bar"] (array) - Meta information
+ holder: Account resource (object, required) - Holder of the meter.
+ assigner: Account resource (object) - Who assigned the meter to the holder; authorized to revoke access at anytime.
+ control_level: owned, subscribed, shared (string, required) - The level of control the holder has on the meter. "Owned" represents the highest level of control.
+ robot: ... (object) - Reference to the robot managing the meter. The robot updates consumption and handles revocation automatically.
+ active: true (boolean, required) - Active meters has access to consumption values.
+ revoked: false (boolean, required) - If revoked the assigner of the meter has decided to deny the holder access, often because the holder's subscription has been canceled at the root holder.
+ consumption_stats: ... (object) - Information about what data that is available for the meter.
+ root: ... (object, required) - Reference to the root meter; remains same for assigned and shared meters
+ timezone: ... (string, required) - Timezone the meter is located in. Used to defined consumption aggregation from hour to day.