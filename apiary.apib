FORMAT: 1A
HOST: https://app.energimolnet.se/api/2.0/

# Energimolnet API v2
Energimolnet collects consumption data from **subscribed meters** managed by utilities, as well as **local meters** managed by organizations or people. 
Developers can access this data to build apps that **help people and organizations save energy**. Or just something that makes energy usage a little bit more exciting.

## Getting started

Copy the link below into a new tab in your <a href="https://app.energimolnet.se/api/v2/accounts/me?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e" target=_blank>web browser</a> 

    https://app.energimolnet.se/api/v2/accounts/me?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

<h3>So, what happend here?</h3>
You just made a request to our API and **requested basic information** about the authenticated user!

<h3>What about the energy consumption?</h3>
To fetch the energy consumption, we first need to see what meters the user has:

    https://app.energimolnet.se/api/v2/meters?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

And to see the **consumption for 2015**, you just type...

    https://app.energimolnet.se/api/v2/consumptions/554367a2d16a0060008b4892/month/2015?access_token=9f999b72772410cfb4fe0d4309b5f9dabb01e2fafcd7ba946c6cdc11aa8e

That's it! Now you have a basic understanding of how our API works. Just scroll down to dig into the details! We're always available at support@energimolnet.se, if you have any questions.

## Authentication

Access to the API requires access-tokens, either a private or a short-lived obtained via OAuth2 protocol.

You **should** pass an access token in a Authorization-header

    Authorization: Bearer <access-token>

You can also pass the access-token in the URL (not recommended)

    https://app.energimolnet.se/api/v2/accounts/me?access_token=<your-private-access-token>

### Private access tokens
Private access-tokens are used to access data for your own account, and should never be 
shared with anyone else. To build apps for other users, then use OAuth2 and 
the Code-flow to obtain *short-lived* access_tokens.

### OAuth2 Authentication

We use **OAuth2** to authenticate users and manages access to third parties. 
Currently we do not offer documentation on OAuth2, we have created a simple <a href="https://github.com/energimolnet/energimolnet-js-oauth-demo">Javascript</a> that demonstrates how the OAuth2 flow can be implemented. Check out the <a href="http://energimolnet-oauth-demo.s3-website-eu-west-1.amazonaws.com/">demo</a>. 

# Group Accounts

## Accounts resource [/accounts/{id}]

### Get an account [GET]

Tip: Use alias "me" to reference the currently authorized user.

+ Parameters
    + id (required, string, `53294e5ae9cada3306001735`) ... The id of the account to get info about

+ Request
    
    + Headers
            
            Authorization: OAuth 2f9bf2cccd808358e6850e41c5a765ed
        

+ Response 200
    
    + Attributes (Account Base)
    
    + Body
    
            {"code":200,"message":"OK","profiling":null,"data":{"_id":"51c14e184a25203f5f000059","name":"Demokonto","username":"demo@demo.se","registration_form":{"enabled":null,"trusted":null,"validate_contracts":true,"css":"","terms":null,"intro_html":"","error_message":"","failure_message":"","logo_path":"","validation_key":null,"validation_secret":null,"welcome_email":null,"error_email":null,"failure_email":null},"plan":null,"role":"user","active":null,"grid_areas":null,"ean_prefixes":null,"ediel_number":null,"sub_accounts_count":0,"sub_accounts":[]}}
            
# Group Meters

A meter represents a physical device that measures consumption from a utility such as heat, cooling or electricity.
Each meter has a holder who can **assign** or **share** the meter to other accounts.

Assigned or shared meters references a root meter, and it is good practice to use the
**root._id** as unique identifer in your own applications. The **_id** field only represents the
reference itself, and is used to updated meta-information about the meter such as name, tags or if the meter is active or not.

## Meter [/meters/{id}]

+ Parameters
    + id (string, requires) - Id of the meter.
         

### Get a meter [GET]

+ Response 200 (application/json)
    + Attributes (Meter Base)
 

## Meters collection [/meters?limit={limit}&skip={skip}]

You can list all meters accessible by the authenticated user. By using query params you can limit

+ Parameters

    + limit (number, optional) - The maximum number of results to return. Cannot be higher than 300`
    + skip (number, optional) - Number of documents to skip.

### List meters [GET]

+ Response 200  (application/json)
    + Attributes (Meter Base)
    
    + Body
            
            {"code":200,"message":"OK","profiling":null,"count":2,"skip":0,"limit":50,"next_page":null,"previous_page":null,"data":[{"holder":{"_id":"521e0be2dedcde8459000000","name":"Magnus L\u00fcttkens","username":"luttkens@gmail.com"},"root":{"_id":"50e5e3413145a7d94a000000","holder":{"_id":"50e5e3413145a7d94a000000","name":"H\u00e4rje\u00e5ns N\u00e4t AB"}},"robot":{"_id":null,"name":null},"assigner":{"_id":"50e5e3413145a7d94a000000","name":"H\u00e4rje\u00e5ns N\u00e4t AB","username":null},"children":[],"control_level":"subscribed","generation":1,"address":"Bruksvallarna 2","timezone":"Etc\/GMT-1","name":"Fj\u00e4llen i Bruksvallarna","tags":["5656"],"revoked":false,"active":true,"ean":"FRI_735999249000268027","type":"electricity","consumption_stats":{"energy":{"hour":{"count":14592,"first":20150416,"last":2015042923,"max":12.13,"min":0,"sum":25033.41},"day":{"count":608,"first":20130901,"last":20150429,"max":148.3,"min":0,"sum":25033.41},"month":{"count":19,"first":201309,"last":201503,"max":2373.65,"min":324.47,"sum":23578.38}}},"deleted":false,"_status ":"connected","_identifier":"Fj\u00e4llen i Bruksvallarna (Bruksvallarna 2)","_is_owner":true,"_id":"526f7711a158318a068b475f"},{"holder":{"_id":"521e0be2dedcde8459000000","name":"Magnus L\u00fcttkens","username":"luttkens@gmail.com"},"root":{"_id":"5268c832dedcde9d1d0000df","holder":{"_id":"5268c832dedcde9d1d0000df","name":"G\u00f6teborg Energi"}},"robot":{"_id":null,"name":null},"assigner":{"_id":"5268c832dedcde9d1d0000df","name":"G\u00f6teborg Energi","username":null},"children":[],"control_level":"subscribed","generation":1,"address":"Johannebergsgatan 18","timezone":"Etc\/GMT-1","name":"Hemma i l\u00e4gh","tags":[],"revoked":false,"active":true,"ean":"735999166200899267","type":"electricity","consumption_stats":{"energy":{"hour":{"count":15264,"first":2013080100,"last":2015042923,"max":2.71,"min":0,"sum":2755.6579999999},"day":{"count":636,"first":20130801,"last":20150429,"max":13.57,"min":0.9,"sum":2755.658},"month":{"count":20,"first":201308,"last":201503,"max":181.18,"min":82.72,"sum":2654.748}}},"deleted":false,"_status ":"connected","_identifier":"Hemma i l\u00e4gh (Johannebergsgatan 18)","_is_owner":true,"_id":"526532d1df62320401000b52"}]}
            


# Group Consumption

Consumption is the use of energy or other metrics for a meter. Consumption is available by the granularity month, day and hour, however, it is important to understand that the availability differs depnding on meter and other external factors.

            
## Get Consumption [/consumptions/{meter_id}/{granularity}/{period}?metrics={metrics}]

We support the following **granularities**: hour, day and month, but we cannot gurantee that it is available for every meter.

The following **metrics** are supported: energy (kWh), flow (m<sup>3</sup>) and power (kW). Power always represents the average power. Note that  metric availability varies between meters.

The response with consumption **values will always match your query**. Missing values are replaced with <code>NULL</code>

### Get consumption for a meter [GET]

+ Parameters
    + meter_id (required, string, `53294e5ae9cada3306001735`) ... The id of the meter to get consumption data for
    + granularity (required, string `month`) ... The granularity to get consumption data for (month, day or hour)
    + period (required, string `2013-201311`) ... Defines what period to fetch data for. You may enter any combination of YYYY, YYYYMM or YYYYMMDD as 
    long as the start date is before the end date. You may also leave out the end date, if you, for instance, would like to just fetch data for 2013.
    All date will be interpreted using the meters timezone.
    + metrics (optional, string `energy,flow,power`) ... Limts the response to one or more metrics seperated by commas. If not specified metric energy is returned.
    
+ Response 200 (application/json)

    + Body
    
            {
                "code": 200,
                "message": "OK",
                "data": [
                    {
                        "periods" : [
                            {
                                "start_date" : "2013-01-01T00:00:00+0001",
                                "end_date" : "2013-11-30T23:00:00+0001",
                                "energy": [1,2,3,4,5,6,7,8,9,10,11],
                                "flow": [1,2,3,4,5,6,7,8,9,10,11]
                            }
                        ],
                        "meter_id": "53185731df62324818000007"
                    }
                ]
            }


# Data Structures

## Account Base (object)
+ _id: 55300dc9f82bd8080094a212 (string, required) - Unique identifier for the account.
+ name: Torsten Freyhazzle (string) - Name of the user
+ username: Torsten Freyhazzle (string) - Email, also used as sign in identity.


## Meter Base (object)
+ _id: 55300dc9f82bd8080094a212 (string, required) - Unique identifier for the meter assigned and shared meters gets a new unique id.
+ type: electricity, heat, cooling, gas, water (string) - What type of consumption the meter represents.
+ name: Pumphuset vid sjön (string) - Meta information
+ address: Klackvägen 12 (string) - Meta information
+ tags: ["foo", "bar"] (array) - Meta information
+ holder: Account resource (object, required) - Holder of the meter.
+ assigner: Account resource (object) - Who assigned the meter to the holder; authorized to revoke access at anytime.
+ control_level: owned, subscribed, shared (string, required) - The level of control the holder has on the meter. "Owned" represents the highest level of control.
+ robot: ... (object) - Reference to the robot managing the meter. The robot updates consumption and handles revocation automatically.
+ active: true (boolean, required) - Active meters has access to consumption values.
+ revoked: false (boolean, required) - If revoked the assigner of the meter has decided to deny the holder access, often because the holder's subscription has been canceled at the root holder.
+ consumption_stats: ... (object) - Information about what data that is available for the meter.
+ root: ... (object, required) - Reference to the root meter; remains same for assigned and shared meters
+ timezone: ... (string, required) - Timezone the meter is located in. Used to defined consumption aggregation from hour to day.

