FORMAT: 1A
HOST: https://app.energimolnet.se/api/2.0/

# Energimolnet API v2 (BETA)
Energimolnet collects energy data from any source available. Once collected, developers can easily access it for any purpose and start making amazing stuff.


## Get started

To get started we recommend you to install a tool for making HTTP requests such as <a href="https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo" target="_BLANK">Advanced Rest Client</a> or <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm" target="_BLANK">Postman</a> for Chrome. This is a good way to understand the API *before you start programming*.

We will use Postman in this example. 

1. Enter the following URL <code>https://app.energimolnet.se/api/2.0/users/me/contracts</code>
2. Add a new Header with name <code>Authorization</code> and value <code>OAuth 2f9bf2cccd808358e6850e41c5a765ed</code>
3. Click Send and you'll see a list of available contracts for the **authenticated user**.

Here's a <a href="https://raw.githubusercontent.com/energimolnet/api-documentation/master/images/Postman.png" >screenshot</a> of what it should look like.

<h4>So, what exactly happened here? </h4>
The URL told the API to return all available contracts. I this case there was just one. The Authorization header tells **who is being authenticated** which determines what contracts will be returned. In this example we use a demo-account which has the consumption for Energimolnet's office.

To get information about the authenticated user try <code>https://app.energimolnet.se/api/2.0/users/me</code>.

**NOTE:** In this example we are using an API-token to access a user's data. API-tokens are only to be used by the user and never shared with anyone else. To build apps for other users, then use OAuth and the Code-flow to obtain refresh_tokens and access_tokens.


## Authentication
We use OAuth2 to authenticate users and manages access to third parties. 

NOTE: This API is under development and may change any time.

## Examples

We have created a simple <a href="https://github.com/energimolnet/energimolnet-js-oauth-demo">Javascript</a> that demonstrates how the OAuth2 flow can be implemented. Check out the <a href="http://energimolnet-oauth-demo.s3-website-eu-west-1.amazonaws.com/">demo</a>. 

# Group Accounts

## Accounts resource [/users/{id}]

### Get an account [GET]

Tip: Use alias "me" to reference the currently authorized user.

+ Parameters
    + id (required, string, `53294e5ae9cada3306001735`) ... The id of the account to get info about

+ Request
    
    + Headers
            
            Authorization: OAuth 2f9bf2cccd808358e6850e41c5a765ed
        

+ Response 200

    + Body
    
            {"code":200,"message":"OK","profiling":null,"data":{"_id":"51c14e184a25203f5f000059","name":"Demokonto","username":"demo@demo.se","registration_form":{"enabled":null,"trusted":null,"validate_contracts":true,"css":"","terms":null,"intro_html":"","error_message":"","failure_message":"","logo_path":"","validation_key":null,"validation_secret":null,"welcome_email":null,"error_email":null,"failure_email":null},"plan":null,"role":"user","active":null,"grid_areas":null,"ean_prefixes":null,"ediel_number":null,"sub_accounts_count":0,"sub_accounts":[]}}

### Update a User resource [PUT]

+ Parameters
    + id (required, string, `53294e5ae9cada3306001735`) ... The id of the user to get info about


+ Request (application/json)

    + Body

            { "name" : "New name" }


+ Response 200

    + Body
    
            {"code":200,"message":"OK","profiling":null,"data":{"_id":"51c14e184a25203f5f000059","name":"New name","username":"demo@demo.se","registration_form":{"enabled":null,"trusted":null,"validate_contracts":true,"css":"","terms":null,"intro_html":"","error_message":"","failure_message":"","logo_path":"","validation_key":null,"validation_secret":null,"welcome_email":null,"error_email":null,"failure_email":null},"plan":null,"role":"user","active":null,"grid_areas":null,"ean_prefixes":null,"ediel_number":null,"sub_accounts_count":0,"sub_accounts":[]}}



            }
            
# Group Meters


## Contract collection [/contracts]

### Get a meter [GET]

+ Request (application/json)

    + Header

            Authorization: Bearer <your-access-token>
    
    + Body

            {
                "name" : "My Summer House",
                "tags" : ["foo", "bar"] 
            }

+ Response 200

    + Body

            {
               "code":200,
               "message":"OK",
               "data":{
                  "meter_id":"521c72ad2e90ff0700000000",
                  "user_id":"504debb13145a70a4a000000",
                  "address":"Johannebergsgatan 18",
                  "name":"My Summer House",
                  "tags":["foo", "bar"],
                  "refused":false,
                  "active":true,
                  "force_access":false,
                  "owner_id":"521c72ad2e90ff0700003040",
                  "owner_name":"Göteborg energi",
                  "ean":"753999166938765849",
                  "type":"electricity",
                  "user_name":"Joe Smith",
                  "user_username":"joe@example.com",
                  "_identifier":"753999166938765849 for Joe Smith",
                  "_id":"52652cc1df62328455000006"
               }
            }
            
            
### Update a meter [PUT]

+ Request (application/json)

    + Header

            Authorization: Bearer <your-access-token>
    
    + Body

            {
                "name" : "My Summer House",
                "tags" : ["foo", "bar"] 
            }

+ Response 200

    + Body

            {
               "code":200,
               "message":"OK",
               "data":{
                  "meter_id":"521c72ad2e90ff0700000000",
                  "user_id":"504debb13145a70a4a000000",
                  "address":"Johannebergsgatan 18",
                  "name":"My Summer House",
                  "tags":["foo", "bar"],
                  "refused":false,
                  "active":true,
                  "force_access":false,
                  "owner_id":"521c72ad2e90ff0700003040",
                  "owner_name":"Göteborg energi",
                  "ean":"753999166938765849",
                  "type":"electricity",
                  "user_name":"Joe Smith",
                  "user_username":"joe@example.com",
                  "_identifier":"753999166938765849 for Joe Smith",
                  "_id":"52652cc1df62328455000006"
               }
            }
            
            

# Group Consumption

Consumption is the use of energy or other metrics for a meter. Consumption is measured by the granularity month, day and hour but the availabilty depends and the consumption feed from the meter's owner.

<h3>Metrics</h3>
<table>
  <tr>
    <td>energy</td><td>Amount of energy used, always measured in kWh</td>
  </tr>
  <tr>
    <td>flow</td><td>Amount of fluid used, always measured in m<sup>3</sup></td>
  </tr>
  <tr>
    <td>power</td><td>Averge power, measured in kW. The timeframe is the same as the requested granularity.</td>
  </tr>
</table>

## Preview consumption for a meter [/consumptions/{meter_id}?metrics={metrics}]

Returns a preview of what consumption data that is available for the meter.

### Preview consumption for a meter [GET]

+ Parameters
    + meter_id (required, string, `53294e5ae9cada3306001735`) ... The id of the meter to get preview consumption for
    + metrics (optional, string `energy,flow,power`) ... Limts the response to one or more metrics seperated by commas. If not specified all available metrics are returned.
    
+ Response 200 (application/json)

    + Body
    
            {
                "code": 200,
                "message": "OK",
                "data": [
                    {
                        "energy" : {
                            "hour": {
                                "first" : 2010020102,
                                "last" : 2014040320,
                                "max" : 34.21,
                                "min" : 0.4,
                                "count" : 35402
                            },
                            "day": {
                                "first" : 20090320,
                                "last" : 20140403,
                                "max" : 4535.21,
                                "min" : 322.4,
                                "count" : 1202
                            },
                            "month": {
                                "first" : 200602,
                                "last" : 201404,
                                "max" : 34432.21,
                                "min" : 834.4,
                                "count" : 254
                            },
                        }
                    }
                ]
            }
            
## Consumption for a meter [/consumptions/{meter_id}/{granularity}/{period}?metrics={metrics}]

If consumption data is found, then **all data points are returned** including missing ones and points that are in the future.

### Get consumption for a meter [GET]

+ Parameters
    + meter_id (required, string, `53294e5ae9cada3306001735`) ... The id of the meter to get consumption data for
    + granularity (required, string `month`) ... The granularity to get consumption data for (month, day or hour)
    + period (required, string `2013-201311`) ... Defines what period to fetch data for. You may enter any combination of YYYY, YYYYMM or YYYYMMDD as 
    long as the start date is before the end date. You may also leave out the end date, if you, for instance, would like to just fetch data for 2013.
    All date will be interpreted using the meters timezone.
    + metrics (optional, string `energy,flow`) ... Limts the response to one or more metrics seperated by commas. If not specified all available metrics are returned.
    
+ Response 200 (application/json)

    + Body
    
            {
                "code": 200,
                "message": "OK",
                "data": [
                    {
                        "periods" : [
                            {
                                "start_date" : "2013-01-01T00:00:00+0001",
                                "end_date" : "2013-11-30T23:00:00+0001",
                                "energy": [1,2,3,4,5,6,7,8,9,10,11],
                                "flow": [1,2,3,4,5,6,7,8,9,10,11]
                            }
                        ],
                        "meter_id": "53185731df62324818000007"
                    }
                ]
            }

## Aggregated consumptions [/consumptions/account/{account_id}/{metric}/{granularity}/{period}]

You can also get aggregated consumptions for all meters accessable by an account holder. If you 
pass a developer's <code>account_id</code>, you will get the aggregated values for all meters that the developer has 
access to thanks to granted access using **shared_with**.

Passing an owner's account_id will return aggregated values for meters that has that owner as owner.

Passing an user's accound_id will return aggregated valus for all meters accessable by that user, that is: meters accessable
thanks to **shared_with** will also be insluded in the aggregation.

### Get aggregated consumption for an account [GET]

+ Response 200 (application/json)

    + Body
    
            {
               "code":200,
               "message":"Deleted"
            }


